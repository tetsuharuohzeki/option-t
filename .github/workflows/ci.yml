name: CI
on:
    push:
        branches:
            # To supress this action launches twice on conditions which fulfills all of follwings:
            #   - On pushing a new change to a branch.
            #   - The branch is opening a pull request
            #   - The branch is origin repository.
            # We limits for push events for `master`.
            # By [this link](https://github.community/t5/GitHub-Actions/How-to-trigger-a-single-build-on-either-push-or-pull-request/m-p/32469#M1144),
            # we seem that we need to add `branches` for `pull_request` event.
            # However, actually, we don't have to limit a target branch for pull requests to suppress this problem.
            # Even if we don't specify it, it triggers this action that pushing to the branch for pull request.
            - master
            # These branches are used by bors-ng.
            - staging
            - trying
        tags-ignore:
            # Ignore for release/
            - v*.*.*
    pull_request:

jobs:
    install_dependencies:
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    # We think that we don't have to specify all versions which we'd like to test
                    # because almost npm packages cares about platform but don't care about node's version.
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              # We only cache `yarn cache dir`, not including `node_modules/`.
              # thus we need to do `yarn install` to restore `node_modules/` so we need run always this step.
              # if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: yarn install

    format_check:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make format_check -j
              env:
                  CI: true

    lint:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make lint -j
              env:
                  CI: true

    build:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make build -j
              env:
                  CI: true

    unittest:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 14
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make run_ava -j
              env:
                  CI: true

    test_distribution_contain_all:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 14
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make test_distribution_contain_all -j
              env:
                  CI: true

    test_esmodule_path_rewrite:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 14
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make test_esmodule_path_rewrite -j
              env:
                  CI: true

    test_package_install:
        needs: [install_dependencies]
        runs-on: ubuntu-latest
        container: node:${{ matrix.node-version }}-buster

        strategy:
            matrix:
                node-version:
                    - 14
                    - 16

        steps:
            - uses: actions/checkout@v2.3.5

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: Restore dependencies from cache
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              uses: actions/cache@v2.1.6
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: v0-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      v0-${{ runner.os }}-yarn-
            - name: Install dependencies
              run: yarn install

            - run: make test_package_install -j
              env:
                  CI: true
